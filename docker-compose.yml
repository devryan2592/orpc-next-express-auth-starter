version: '3.8'
  
services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: st-backend
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
    networks:
      - st-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend CRM Service
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    container_name: st-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - st-network
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # PostgreSQL Database (if needed)
  postgres:
    image: postgres:15-alpine
    container_name: st-postgres
    environment:
      - POSTGRES_DB=st_holidays
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - st-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  

  # Redis Cache (if needed)
  redis:
    image: redis:7-alpine
    container_name: st-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - st-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  st-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
